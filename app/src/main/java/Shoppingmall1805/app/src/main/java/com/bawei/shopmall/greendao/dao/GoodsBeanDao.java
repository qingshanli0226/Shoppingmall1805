package Shoppingmall1805.app.src.main.java.com.bawei.shopmall.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bawei.shopmall.greendao.GoodsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_BEAN".
*/
public class GoodsBeanDao extends AbstractDao<GoodsBean, Void> {

    public static final String TABLENAME = "GOODS_BEAN";

    /**
     * Properties of entity GoodsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Cover_price = new Property(1, String.class, "cover_price", false, "COVER_PRICE");
        public final static Property Figure = new Property(2, String.class, "figure", false, "FIGURE");
        public final static Property Product_id = new Property(3, String.class, "product_id", false, "PRODUCT_ID");
        public final static Property Number = new Property(4, int.class, "number", false, "NUMBER");
    }


    public GoodsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_BEAN\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"COVER_PRICE\" TEXT," + // 1: cover_price
                "\"FIGURE\" TEXT," + // 2: figure
                "\"PRODUCT_ID\" TEXT," + // 3: product_id
                "\"NUMBER\" INTEGER NOT NULL );"); // 4: number
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsBean entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String cover_price = entity.getCover_price();
        if (cover_price != null) {
            stmt.bindString(2, cover_price);
        }
 
        String figure = entity.getFigure();
        if (figure != null) {
            stmt.bindString(3, figure);
        }
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(4, product_id);
        }
        stmt.bindLong(5, entity.getNumber());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsBean entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String cover_price = entity.getCover_price();
        if (cover_price != null) {
            stmt.bindString(2, cover_price);
        }
 
        String figure = entity.getFigure();
        if (figure != null) {
            stmt.bindString(3, figure);
        }
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(4, product_id);
        }
        stmt.bindLong(5, entity.getNumber());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GoodsBean readEntity(Cursor cursor, int offset) {
        GoodsBean entity = new GoodsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cover_price
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // figure
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // product_id
            cursor.getInt(offset + 4) // number
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GoodsBean entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCover_price(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFigure(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProduct_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNumber(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GoodsBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GoodsBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(GoodsBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
